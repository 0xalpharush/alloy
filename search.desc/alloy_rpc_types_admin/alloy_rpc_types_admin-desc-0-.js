searchState.loadedDescShard("alloy_rpc_types_admin", 0, "alloy-rpc-types-admin\nRepresents a short summary of the <code>eth</code> sub-protocol …\nCan contain either eth protocol info or a string “…\nRepresents a short summary of the <code>eth</code> sub-protocol …\nThe string “handshake” if the peer is still completing …\nThe string “handshake” if the peer is still completing …\nThe <code>eth</code> sub-protocol metadata known about the host peer.\nThe <code>snap</code> sub-protocol metadata known about the host peer.\nThis includes general information about a running node, …\nRepresents a short summary of information known about a …\nRepresents networking related information about the peer, …\nRepresents the protocols that a peer supports.\nRepresents a node’s discovery and listener ports.\nRepresents protocols that the connected RPC node supports.\nRepresents a short summary of the <code>snap</code> sub-protocol …\nCan contain either snap protocol info or a string “…\nRepresents a short summary of the host’s <code>snap</code> …\nTypes for the <code>admin</code> API.\nThe peer’s capabilities.\nThe chain configuration for the host’s fork rules.\nThe total difficulty of the host’s blockchain.\nThe node’s discovery port.\nThe enode URL of the connected node.\nThe peer’s enode URL.\nThe ENR of the running client.\nThe peer’s ENR.\nDetails about the node’s supported eth protocol. <code>None</code> if …\nDetails about the peer’s supported eth protocol. <code>None</code> if …\nThe Keccak hash of the host’s genesis block.\nThe hash of the host’s best known block.\nUnique node identifier.\nThe peer’s enode ID.\nWhether or not the peer is inbound.\nThe IP address of the connected node.\nThe node’s listening address.\nThe node’s listener port.\nThe local endpoint of the TCP connection.\nThe node’s user agent, containing a client name, …\nThe peer’s name.\nThe eth network version.\nNetworking information about the peer.\nPlaceholder for any other protocols\nThe node’s listening ports.\nThe protocols that the node supports, with protocol …\nThe protocols that the peer supports, with protocol …\nThe remote endpoint of the TCP connection.\nDetails about the node’s supported snap protocol. <code>None</code> …\nDetails about the peer’s supported snap protocol. <code>None</code> …\nWhether or not the peer is a static peer.\nWhether or not the peer is trusted.\nThe negotiated eth version.\nThe negotiated snap version.\nRepresents a short summary of the <code>eth</code> sub-protocol …\nCan contain either eth protocol info or a string “…\nRepresents a short summary of the <code>eth</code> sub-protocol …\nThe string “handshake” if the peer is still completing …\nThe string “handshake” if the peer is still completing …\nThe <code>eth</code> sub-protocol metadata known about the host peer.\nThe <code>snap</code> sub-protocol metadata known about the host peer.\nThis includes general information about a running node, …\nRepresents a short summary of information known about a …\nRepresents networking related information about the peer, …\nRepresents the protocols that a peer supports.\nRepresents a node’s discovery and listener ports.\nRepresents protocols that the connected RPC node supports.\nRepresents a short summary of the <code>snap</code> sub-protocol …\nCan contain either snap protocol info or a string “…\nRepresents a short summary of the host’s <code>snap</code> …\nThe peer’s capabilities.\nThe chain configuration for the host’s fork rules.\nThe total difficulty of the host’s blockchain.\nThe node’s discovery port.\nThe enode URL of the connected node.\nThe peer’s enode URL.\nThe ENR of the running client.\nThe peer’s ENR.\nDetails about the node’s supported eth protocol. <code>None</code> if …\nDetails about the peer’s supported eth protocol. <code>None</code> if …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe Keccak hash of the host’s genesis block.\nThe hash of the host’s best known block.\nUnique node identifier.\nThe peer’s enode ID.\nWhether or not the peer is inbound.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe IP address of the connected node.\nThe node’s listening address.\nThe node’s listener port.\nThe local endpoint of the TCP connection.\nThe node’s user agent, containing a client name, …\nThe peer’s name.\nThe eth network version.\nNetworking information about the peer.\nPlaceholder for any other protocols\nThe node’s listening ports.\nThe protocols that the node supports, with protocol …\nThe protocols that the peer supports, with protocol …\nThe remote endpoint of the TCP connection.\nDetails about the node’s supported snap protocol. <code>None</code> …\nDetails about the peer’s supported snap protocol. <code>None</code> …\nWhether or not the peer is a static peer.\nWhether or not the peer is trusted.\nThe negotiated eth version.\nThe negotiated snap version.")